/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashRouteRouteImport } from './routes/_dash/route'
import { Route as DashIndexRouteImport } from './routes/_dash/index'
import { Route as DashSandboxRouteImport } from './routes/_dash/sandbox'
import { Route as DashPurchasesRouteImport } from './routes/_dash/purchases'
import { Route as DashProductsRouteImport } from './routes/_dash/products'
import { Route as DashOrdersRouteImport } from './routes/_dash/orders'
import { Route as DashCategoriesRouteImport } from './routes/_dash/categories'
import { Route as DashBrandsRouteImport } from './routes/_dash/brands'
import { Route as DashAnalyticsRouteImport } from './routes/_dash/analytics'
import { Route as DashBrandsAddRouteImport } from './routes/_dash/brands.add'

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashRouteRoute = DashRouteRouteImport.update({
  id: '/_dash',
  getParentRoute: () => rootRouteImport,
} as any)
const DashIndexRoute = DashIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashSandboxRoute = DashSandboxRouteImport.update({
  id: '/sandbox',
  path: '/sandbox',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashPurchasesRoute = DashPurchasesRouteImport.update({
  id: '/purchases',
  path: '/purchases',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashProductsRoute = DashProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashOrdersRoute = DashOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashCategoriesRoute = DashCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashBrandsRoute = DashBrandsRouteImport.update({
  id: '/brands',
  path: '/brands',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashAnalyticsRoute = DashAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => DashRouteRoute,
} as any)
const DashBrandsAddRoute = DashBrandsAddRouteImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => DashBrandsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/todos': typeof TodosRoute
  '/analytics': typeof DashAnalyticsRoute
  '/brands': typeof DashBrandsRouteWithChildren
  '/categories': typeof DashCategoriesRoute
  '/orders': typeof DashOrdersRoute
  '/products': typeof DashProductsRoute
  '/purchases': typeof DashPurchasesRoute
  '/sandbox': typeof DashSandboxRoute
  '/': typeof DashIndexRoute
  '/brands/add': typeof DashBrandsAddRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/todos': typeof TodosRoute
  '/analytics': typeof DashAnalyticsRoute
  '/brands': typeof DashBrandsRouteWithChildren
  '/categories': typeof DashCategoriesRoute
  '/orders': typeof DashOrdersRoute
  '/products': typeof DashProductsRoute
  '/purchases': typeof DashPurchasesRoute
  '/sandbox': typeof DashSandboxRoute
  '/': typeof DashIndexRoute
  '/brands/add': typeof DashBrandsAddRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dash': typeof DashRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/todos': typeof TodosRoute
  '/_dash/analytics': typeof DashAnalyticsRoute
  '/_dash/brands': typeof DashBrandsRouteWithChildren
  '/_dash/categories': typeof DashCategoriesRoute
  '/_dash/orders': typeof DashOrdersRoute
  '/_dash/products': typeof DashProductsRoute
  '/_dash/purchases': typeof DashPurchasesRoute
  '/_dash/sandbox': typeof DashSandboxRoute
  '/_dash/': typeof DashIndexRoute
  '/_dash/brands/add': typeof DashBrandsAddRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/todos'
    | '/analytics'
    | '/brands'
    | '/categories'
    | '/orders'
    | '/products'
    | '/purchases'
    | '/sandbox'
    | '/'
    | '/brands/add'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/todos'
    | '/analytics'
    | '/brands'
    | '/categories'
    | '/orders'
    | '/products'
    | '/purchases'
    | '/sandbox'
    | '/'
    | '/brands/add'
  id:
    | '__root__'
    | '/_dash'
    | '/login'
    | '/todos'
    | '/_dash/analytics'
    | '/_dash/brands'
    | '/_dash/categories'
    | '/_dash/orders'
    | '/_dash/products'
    | '/_dash/purchases'
    | '/_dash/sandbox'
    | '/_dash/'
    | '/_dash/brands/add'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashRouteRoute: typeof DashRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  TodosRoute: typeof TodosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dash': {
      id: '/_dash'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dash/': {
      id: '/_dash/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashIndexRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/sandbox': {
      id: '/_dash/sandbox'
      path: '/sandbox'
      fullPath: '/sandbox'
      preLoaderRoute: typeof DashSandboxRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/purchases': {
      id: '/_dash/purchases'
      path: '/purchases'
      fullPath: '/purchases'
      preLoaderRoute: typeof DashPurchasesRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/products': {
      id: '/_dash/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof DashProductsRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/orders': {
      id: '/_dash/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof DashOrdersRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/categories': {
      id: '/_dash/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof DashCategoriesRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/brands': {
      id: '/_dash/brands'
      path: '/brands'
      fullPath: '/brands'
      preLoaderRoute: typeof DashBrandsRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/analytics': {
      id: '/_dash/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof DashAnalyticsRouteImport
      parentRoute: typeof DashRouteRoute
    }
    '/_dash/brands/add': {
      id: '/_dash/brands/add'
      path: '/add'
      fullPath: '/brands/add'
      preLoaderRoute: typeof DashBrandsAddRouteImport
      parentRoute: typeof DashBrandsRoute
    }
  }
}

interface DashBrandsRouteChildren {
  DashBrandsAddRoute: typeof DashBrandsAddRoute
}

const DashBrandsRouteChildren: DashBrandsRouteChildren = {
  DashBrandsAddRoute: DashBrandsAddRoute,
}

const DashBrandsRouteWithChildren = DashBrandsRoute._addFileChildren(
  DashBrandsRouteChildren,
)

interface DashRouteRouteChildren {
  DashAnalyticsRoute: typeof DashAnalyticsRoute
  DashBrandsRoute: typeof DashBrandsRouteWithChildren
  DashCategoriesRoute: typeof DashCategoriesRoute
  DashOrdersRoute: typeof DashOrdersRoute
  DashProductsRoute: typeof DashProductsRoute
  DashPurchasesRoute: typeof DashPurchasesRoute
  DashSandboxRoute: typeof DashSandboxRoute
  DashIndexRoute: typeof DashIndexRoute
}

const DashRouteRouteChildren: DashRouteRouteChildren = {
  DashAnalyticsRoute: DashAnalyticsRoute,
  DashBrandsRoute: DashBrandsRouteWithChildren,
  DashCategoriesRoute: DashCategoriesRoute,
  DashOrdersRoute: DashOrdersRoute,
  DashProductsRoute: DashProductsRoute,
  DashPurchasesRoute: DashPurchasesRoute,
  DashSandboxRoute: DashSandboxRoute,
  DashIndexRoute: DashIndexRoute,
}

const DashRouteRouteWithChildren = DashRouteRoute._addFileChildren(
  DashRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashRouteRoute: DashRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  TodosRoute: TodosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
